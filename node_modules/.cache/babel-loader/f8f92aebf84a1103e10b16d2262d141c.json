{
  "ast": null,
  "code": "var BasicColors;\n(function (BasicColors) {\n  BasicColors[\"maroon\"] = \"#800000\";\n  BasicColors[\"red\"] = \"#FF0000\";\n  BasicColors[\"orange\"] = \"#FFA500\";\n  BasicColors[\"yellow\"] = \"#FFFF00\";\n  BasicColors[\"olive\"] = \"#808000\";\n  BasicColors[\"green\"] = \"#008000\";\n  BasicColors[\"purple\"] = \"#800080\";\n  BasicColors[\"fuchsia\"] = \"#FF00FF\";\n  BasicColors[\"lime\"] = \"#00FF00\";\n  BasicColors[\"teal\"] = \"#008080\";\n  BasicColors[\"aqua\"] = \"#00FFFF\";\n  BasicColors[\"blue\"] = \"#0000FF\";\n  BasicColors[\"navy\"] = \"#000080\";\n  BasicColors[\"black\"] = \"#000000\";\n  BasicColors[\"gray\"] = \"#808080\";\n  BasicColors[\"silver\"] = \"#C0C0C0\";\n  BasicColors[\"white\"] = \"#FFFFFF\";\n})(BasicColors || (BasicColors = {}));\nvar handleRgbColorString = function (color, opacity) {\n  // rgb(a)(255 255 255 / 80%)\n  if (color.includes(\"/\")) {\n    return color.replace(\"rgb(\", \"rgba(\");\n  }\n  var rgbValues = color.substring(color.startsWith(\"rgba(\") ? 5 : 4, color.length - 1).trim();\n  var splittedByCommas = rgbValues.split(\",\");\n  // rgb(a)(255, 255, 255, 0.8)\n  if (splittedByCommas.length === 4) {\n    return color.replace(\"rgb(\", \"rgba(\");\n  }\n  // rgb(a)(255, 255, 255)\n  if (splittedByCommas.length === 3) {\n    return \"rgba(\".concat(rgbValues, \", \").concat(opacity, \")\");\n  }\n  // rgb(a)(255 255 255)\n  return \"rgba(\".concat(rgbValues, \" / \").concat(opacity, \")\");\n};\nexport var calculateRgba = function (color, opacity) {\n  if (color.startsWith(\"rgb\")) {\n    return handleRgbColorString(color, opacity);\n  }\n  if (Object.keys(BasicColors).includes(color)) {\n    color = BasicColors[color];\n  }\n  if (color[0] === \"#\") {\n    color = color.slice(1);\n  }\n  if (color.length === 3) {\n    var res_1 = \"\";\n    color.split(\"\").forEach(function (c) {\n      res_1 += c;\n      res_1 += c;\n    });\n    color = res_1;\n  }\n  var rgbValues = (color.match(/.{2}/g) || []).map(function (hex) {\n    return parseInt(hex, 16);\n  }).join(\", \");\n  return \"rgba(\".concat(rgbValues, \", \").concat(opacity, \")\");\n};",
  "map": null,
  "metadata": {},
  "sourceType": "module"
}
